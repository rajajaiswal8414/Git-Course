1. Update Auth Service with Route Protection
typescript
// src/app/services/auth.service.ts
import { Injectable, inject } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { BehaviorSubject, Observable, tap } from 'rxjs';
import { Router } from '@angular/router';
import { environment } from '../../environments/environment';
import { Patient, LoginRequest, AuthResponse, RegisterRequest } from '../models/patient.model';

@Injectable({
  providedIn: 'root'
})
export class AuthService {
  private http = inject(HttpClient);
  private router = inject(Router);
  private apiUrl = environment.apiUrl;
  private tokenKey = 'auth_token';
  private patientKey = 'patient_data';
  private userRoleKey = 'user_role';
  
  private isAuthenticatedSubject = new BehaviorSubject<boolean>(this.hasToken());
  private userRoleSubject = new BehaviorSubject<string>(this.getUserRole());
  
  register(registerRequest: RegisterRequest): Observable<AuthResponse> {
    return this.http.post<AuthResponse>(`${this.apiUrl}/auth/register`, registerRequest)
      .pipe(
        tap(response => this.setAuthData(response, 'PATIENT'))
      );
  }

  login(loginRequest: LoginRequest): Observable<AuthResponse> {
    return this.http.post<AuthResponse>(`${this.apiUrl}/auth/login`, loginRequest)
      .pipe(
        tap(response => {
          // Determine role based on response or login type
          const role = response.patient ? 'PATIENT' : 
                      response.doctor ? 'DOCTOR' : 'ADMIN';
          this.setAuthData(response, role);
        })
      );
  }

  logout(): void {
    localStorage.removeItem(this.tokenKey);
    localStorage.removeItem(this.patientKey);
    localStorage.removeItem(this.userRoleKey);
    this.isAuthenticatedSubject.next(false);
    this.userRoleSubject.next('');
    this.router.navigate(['/login']);
  }

  getToken(): string | null {
    return localStorage.getItem(this.tokenKey);
  }

  getCurrentPatient(): Patient | null {
    const patientData = localStorage.getItem(this.patientKey);
    return patientData ? JSON.parse(patientData) : null;
  }

  getUserRole(): string {
    return localStorage.getItem(this.userRoleKey) || '';
  }

  isAuthenticated(): Observable<boolean> {
    return this.isAuthenticatedSubject.asObservable();
  }

  getCurrentUserRole(): Observable<string> {
    return this.userRoleSubject.asObservable();
  }

  private setAuthData(response: AuthResponse, role: string): void {
    localStorage.setItem(this.tokenKey, response.token);
    localStorage.setItem(this.userRoleKey, role);
    
    if (response.patient) {
      localStorage.setItem(this.patientKey, JSON.stringify(response.patient));
    }
    
    this.isAuthenticatedSubject.next(true);
    this.userRoleSubject.next(role);
    
    // Navigate based on role
    this.redirectBasedOnRole(role);
  }

  private redirectBasedOnRole(role: string): void {
    switch (role) {
      case 'PATIENT':
        this.router.navigate(['/patient/dashboard']);
        break;
      case 'DOCTOR':
        this.router.navigate(['/doctor/dashboard']);
        break;
      case 'ADMIN':
        this.router.navigate(['/admin/dashboard']);
        break;
      default:
        this.router.navigate(['/dashboard']);
    }
  }

  private hasToken(): boolean {
    return !!this.getToken();
  }

  // Check if user can access route based on role
  canAccess(requiredRole: string): boolean {
    const userRole = this.getUserRole();
    return userRole === requiredRole;
  }
}
2. Enhanced Auth Guard with Role Protection
typescript
// src/app/guards/auth.guard.ts
import { inject } from '@angular/core';
import { CanActivateFn, Router, ActivatedRouteSnapshot } from '@angular/router';
import { map, take } from 'rxjs/operators';
import { AuthService } from '../services/auth.service';

export const authGuard: CanActivateFn = (route: ActivatedRouteSnapshot) => {
  const authService = inject(AuthService);
  const router = inject(Router);

  return authService.isAuthenticated().pipe(
    take(1),
    map(isAuthenticated => {
      if (!isAuthenticated) {
        // Redirect to login if not authenticated
        router.navigate(['/login'], { 
          queryParams: { returnUrl: route.url.join('/') } 
        });
        return false;
      }

      // Check role-based access
      const requiredRole = route.data['role'];
      if (requiredRole && !authService.canAccess(requiredRole)) {
        // Redirect to appropriate dashboard based on user role
        const userRole = authService.getUserRole();
        switch (userRole) {
          case 'PATIENT':
            router.navigate(['/patient/dashboard']);
            break;
          case 'DOCTOR':
            router.navigate(['/doctor/dashboard']);
            break;
          case 'ADMIN':
            router.navigate(['/admin/dashboard']);
            break;
          default:
            router.navigate(['/dashboard']);
        }
        return false;
      }

      return true;
    })
  );
};
3. Updated Route Configuration
typescript
// src/app/app.routes.ts
import { Routes } from '@angular/router';
import { LoginComponent } from './components/login/login.component';
import { RegisterComponent } from './components/register/register.component';
import { DashboardComponent } from './components/dashboard/dashboard.component';
import { PatientDashboardComponent } from './components/patient-dashboard/patient-dashboard.component';
import { DoctorDashboardComponent } from './components/doctor-dashboard/doctor-dashboard.component';
import { AdminDashboardComponent } from './components/admin-dashboard/admin-dashboard.component';
import { LandingComponent } from './components/landing/landing.component';
import { authGuard } from './guards/auth.guard';

export const routes: Routes = [
  // Public routes
  { path: '', component: LandingComponent, title: 'MediCare - Home' },
  { path: 'login', component: LoginComponent, title: 'Login' },
  { path: 'register', component: RegisterComponent, title: 'Register' },
  
  // Protected routes with role-based access
  { 
    path: 'patient/dashboard', 
    component: PatientDashboardComponent, 
    canActivate: [authGuard],
    data: { role: 'PATIENT' },
    title: 'Patient Dashboard'
  },
  { 
    path: 'patient/appointments', 
    component: PatientDashboardComponent, 
    canActivate: [authGuard],
    data: { role: 'PATIENT' },
    title: 'My Appointments'
  },
  { 
    path: 'patient/prescriptions', 
    component: PatientDashboardComponent, 
    canActivate: [authGuard],
    data: { role: 'PATIENT' },
    title: 'My Prescriptions'
  },
  
  { 
    path: 'doctor/dashboard', 
    component: DoctorDashboardComponent, 
    canActivate: [authGuard],
    data: { role: 'DOCTOR' },
    title: 'Doctor Dashboard'
  },
  { 
    path: 'doctor/patients', 
    component: DoctorDashboardComponent, 
    canActivate: [authGuard],
    data: { role: 'DOCTOR' },
    title: 'Patient Management'
  },
  { 
    path: 'doctor/appointments', 
    component: DoctorDashboardComponent, 
    canActivate: [authGuard],
    data: { role: 'DOCTOR' },
    title: 'Appointments'
  },
  
  { 
    path: 'admin/dashboard', 
    component: AdminDashboardComponent, 
    canActivate: [authGuard],
    data: { role: 'ADMIN' },
    title: 'Admin Dashboard'
  },
  
  // Fallback routes - redirect based on user role
  { 
    path: 'dashboard', 
    canActivate: [authGuard],
    children: [] // This will be redirected based on role in guard
  },
  
  // Catch-all route - redirect to appropriate dashboard or login
  { 
    path: '**', 
    redirectTo: '' 
  }
];
4. Role-Based Dashboard Components
typescript
// src/app/components/patient-dashboard/patient-dashboard.component.ts
import { Component, inject, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { Router, ActivatedRoute } from '@angular/router';
import { AuthService } from '../../services/auth.service';
import { PatientService } from '../../services/patient.service';

@Component({
  selector: 'app-patient-dashboard',
  standalone: true,
  imports: [CommonModule],
  template: `
    <div class="min-h-screen bg-gray-50">
      <!-- Patient-specific dashboard content -->
      <div class="p-6">
        <h1 class="text-2xl font-bold">Patient Dashboard</h1>
        <!-- Your patient dashboard content here -->
      </div>
    </div>
  `
})
export class PatientDashboardComponent implements OnInit {
  private authService = inject(AuthService);
  private router = inject(Router);
  private route = inject(ActivatedRoute);

  ngOnInit() {
    // Ensure user is patient
    if (!this.authService.canAccess('PATIENT')) {
      this.router.navigate(['/login']);
    }
  }
}
typescript
// src/app/components/doctor-dashboard/doctor-dashboard.component.ts
import { Component, inject, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { Router } from '@angular/router';
import { AuthService } from '../../services/auth.service';

@Component({
  selector: 'app-doctor-dashboard',
  standalone: true,
  imports: [CommonModule],
  template: `
    <div class="min-h-screen bg-gray-50">
      <!-- Doctor-specific dashboard content -->
      <div class="p-6">
        <h1 class="text-2xl font-bold">Doctor Dashboard</h1>
        <!-- Your doctor dashboard content here -->
      </div>
    </div>
  `
})
export class DoctorDashboardComponent implements OnInit {
  private authService = inject(AuthService);
  private router = inject(Router);

  ngOnInit() {
    // Ensure user is doctor
    if (!this.authService.canAccess('DOCTOR')) {
      this.router.navigate(['/login']);
    }
  }
}
typescript
// src/app/components/admin-dashboard/admin-dashboard.component.ts
import { Component, inject, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { Router } from '@angular/router';
import { AuthService } from '../../services/auth.service';

@Component({
  selector: 'app-admin-dashboard',
  standalone: true,
  imports: [CommonModule],
  template: `
    <div class="min-h-screen bg-gray-50">
      <!-- Admin-specific dashboard content -->
      <div class="p-6">
        <h1 class="text-2xl font-bold">Admin Dashboard</h1>
        <!-- Your admin dashboard content here -->
      </div>
    </div>
  `
})
export class AdminDashboardComponent implements OnInit {
  private authService = inject(AuthService);
  private router = inject(Router);

  ngOnInit() {
    // Ensure user is admin
    if (!this.authService.canAccess('ADMIN')) {
      this.router.navigate(['/login']);
    }
  }
}
5. Landing Component
typescript
// src/app/components/landing/landing.component.ts
import { Component, inject, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { Router } from '@angular/router';
import { AuthService } from '../../services/auth.service';

@Component({
  selector: 'app-landing',
  standalone: true,
  imports: [CommonModule],
  template: `
    <div class="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center">
      <div class="text-center">
        <h1 class="text-4xl font-bold text-gray-800 mb-4">Welcome to MediCare</h1>
        <p class="text-lg text-gray-600 mb-8">Your health, our priority</p>
        
        <div class="space-x-4">
          <button 
            *ngIf="!isAuthenticated"
            (click)="navigateToLogin()" 
            class="bg-blue-600 text-white px-6 py-3 rounded-lg font-semibold hover:bg-blue-700 transition-colors">
            Get Started
          </button>
          <button 
            *ngIf="isAuthenticated"
            (click)="navigateToDashboard()" 
            class="bg-green-600 text-white px-6 py-3 rounded-lg font-semibold hover:bg-green-700 transition-colors">
            Go to Dashboard
          </button>
        </div>
      </div>
    </div>
  `
})
export class LandingComponent implements OnInit {
  private authService = inject(AuthService);
  private router = inject(Router);
  
  isAuthenticated = false;

  ngOnInit() {
    this.authService.isAuthenticated().subscribe(
      authenticated => this.isAuthenticated = authenticated
    );
  }

  navigateToLogin() {
    this.router.navigate(['/login']);
  }

  navigateToDashboard() {
    const role = this.authService.getUserRole();
    switch (role) {
      case 'PATIENT':
        this.router.navigate(['/patient/dashboard']);
        break;
      case 'DOCTOR':
        this.router.navigate(['/doctor/dashboard']);
        break;
      case 'ADMIN':
        this.router.navigate(['/admin/dashboard']);
        break;
      default:
        this.router.navigate(['/dashboard']);
    }
  }
}
6. Updated Login Component
typescript
// src/app/components/login/login.component.ts
import { Component, inject, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ReactiveFormsModule, FormBuilder, FormGroup, Validators } from '@angular/forms';
import { Router, ActivatedRoute } from '@angular/router';
import { AuthService } from '../../services/auth.service';
import { LoginRequest } from '../../models/patient.model';

@Component({
  selector: 'app-login',
  standalone: true,
  imports: [CommonModule, ReactiveFormsModule],
  templateUrl: './login.component.html'
})
export class LoginComponent implements OnInit {
  private fb = inject(FormBuilder);
  private authService = inject(AuthService);
  private router = inject(Router);
  private route = inject(ActivatedRoute);

  loginForm: FormGroup;
  errorMessage: string = '';
  isLoading: boolean = false;
  returnUrl: string = '';

  constructor() {
    this.loginForm = this.fb.group({
      email: ['', [Validators.required, Validators.email]],
      password: ['', [Validators.required]]
    });
  }

  ngOnInit() {
    // Get return url from route parameters or default to patient dashboard
    this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/patient/dashboard';
    
    // If already authenticated, redirect to returnUrl
    if (this.authService.getToken()) {
      this.redirectAuthenticatedUser();
    }
  }

  onSubmit(): void {
    if (this.loginForm.valid) {
      this.isLoading = true;
      this.errorMessage = '';

      const loginRequest: LoginRequest = {
        email: this.loginForm.get('email')?.value,
        password: this.loginForm.get('password')?.value
      };

      this.authService.login(loginRequest).subscribe({
        next: () => {
          this.isLoading = false;
          // Navigation is handled in auth service based on role
        },
        error: (error) => {
          this.isLoading = false;
          this.errorMessage = error.error?.message || 'Login failed. Please check your credentials.';
        }
      });
    } else {
      this.loginForm.markAllAsTouched();
    }
  }

  private redirectAuthenticatedUser(): void {
    const role = this.authService.getUserRole();
    switch (role) {
      case 'PATIENT':
        this.router.navigateByUrl(this.returnUrl);
        break;
      case 'DOCTOR':
        this.router.navigate(['/doctor/dashboard']);
        break;
      case 'ADMIN':
        this.router.navigate(['/admin/dashboard']);
        break;
      default:
        this.router.navigate(['/dashboard']);
    }
  }
}
7. Enhanced Navigation Service (Optional)
typescript
// src/app/services/navigation.service.ts
import { Injectable, inject } from '@angular/core';
import { Router } from '@angular/router';
import { AuthService } from './auth.service';

@Injectable({
  providedIn: 'root'
})
export class NavigationService {
  private router = inject(Router);
  private authService = inject(AuthService);

  navigateToDashboard(): void {
    const role = this.authService.getUserRole();
    this.navigateBasedOnRole(role);
  }

  navigateBasedOnRole(role: string): void {
    switch (role) {
      case 'PATIENT':
        this.router.navigate(['/patient/dashboard']);
        break;
      case 'DOCTOR':
        this.router.navigate(['/doctor/dashboard']);
        break;
      case 'ADMIN':
        this.router.navigate(['/admin/dashboard']);
        break;
      default:
        this.router.navigate(['/']);
    }
  }

  // Prevent back navigation to login after authentication
  initializeBackButtonPrevention(): void {
    window.addEventListener('popstate', (event) => {
      const currentUrl = this.router.url;
      
      // If user is authenticated and tries to go back to login, prevent it
      if (this.authService.getToken() && currentUrl.includes('/login')) {
        history.pushState(null, '', this.router.url);
        this.navigateToDashboard();
      }
    });
  }
}
8. Update App Component
typescript
// src/app/app.component.ts
import { Component, OnInit, inject } from '@angular/core';
import { CommonModule } from '@angular/common';
import { RouterOutlet } from '@angular/router';
import { NavigationService } from './services/navigation.service';

@Component({
  selector: 'app-root',
  standalone: true,
  imports: [CommonModule, RouterOutlet],
  template: `<router-outlet></router-outlet>`
})
export class AppComponent implements OnInit {
  private navigationService = inject(NavigationService);

  ngOnInit() {
    // Initialize back button prevention
    this.navigationService.initializeBackButtonPrevention();
  }
}
Key Fixes Applied:
Fixed Wildcard Route: Removed the catch-all route that was redirecting to landing page

Role-Based Routing: Each user type has their own dashboard routes

Back Button Prevention: Added logic to prevent going back to login after authentication

Route Protection: Enhanced auth guard with role-based access control

Proper Redirects: Users are redirected to appropriate dashboards based on their roles

Return URL Support: After login, users are redirected to their intended destination

How it works:
After login: User is redirected to role-specific dashboard (/patient/dashboard, /doctor/dashboard, etc.)

URL changes: If a patient tries to access doctor routes, they get redirected to patient dashboard

Back button: Prevents going back to login page after authentication

Wildcard routes: Now properly handled with role-based redirection

Route protection: Each route is protected based on user role

Now when you login as a patient and change the URL, you'll stay within the patient-accessible routes, and the back button won't take you back to the login page.

